[1m/proyecto/src/config/ConfigNode.cpp:17:5: [31mperformance:[39m Variable '_type' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList][0m
    _type = other._type;
    ^
[1m/proyecto/src/config/ConfigNode.cpp:18:5: [31mperformance:[39m Variable '_values' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList][0m
    _values = other._values;
    ^
[1m/proyecto/include/config/ConfigParser.hpp:11:34: [31m[35mstyle: inconclusive:[39m Technically the member function 'ConfigParser::tokenize' can be const. [functionConst][0m
        std::vector<std::string> tokenize(std::ifstream& file);
                                 ^
[1m/proyecto/src/config/ConfigParser.cpp:116:40: [2mnote:[0m Technically the member function 'ConfigParser::tokenize' can be const.
std::vector<std::string> ConfigParser::tokenize(std::ifstream& file) {
                                       ^
[1m/proyecto/include/config/ConfigParser.hpp:11:34: [2mnote:[0m Technically the member function 'ConfigParser::tokenize' can be const.
        std::vector<std::string> tokenize(std::ifstream& file);
                                 ^
[1m/proyecto/include/config/ConfigParser.hpp:28:21: [31m[35mperformance: inconclusive:[39m Technically the member function 'ConfigParser::getDirectiveValue' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
        std::string getDirectiveValue(const IConfig* node, const std::string& key, const std::string& defaultValue) ;
                    ^
[1m/proyecto/src/config/ConfigParser.cpp:249:27: [2mnote:[0m Technically the member function 'ConfigParser::getDirectiveValue' can be static (but you may consider moving to unnamed namespace).
std::string ConfigParser::getDirectiveValue(const IConfig* node, const std::string& key, const std::string& defaultValue)
                          ^
[1m/proyecto/include/config/ConfigParser.hpp:28:21: [2mnote:[0m Technically the member function 'ConfigParser::getDirectiveValue' can be static (but you may consider moving to unnamed namespace).
        std::string getDirectiveValue(const IConfig* node, const std::string& key, const std::string& defaultValue) ;
                    ^
[1m/proyecto/include/config/ConfigParser.hpp:31:14: [31m[35mperformance: inconclusive:[39m Technically the member function 'ConfigParser::validateErrorPagePath' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
        bool validateErrorPagePath(const std::string& filePath) const;
             ^
[1m/proyecto/src/config/ConfigParser.cpp:324:20: [2mnote:[0m Technically the member function 'ConfigParser::validateErrorPagePath' can be static (but you may consider moving to unnamed namespace).
bool ConfigParser::validateErrorPagePath(const std::string& filePath) const {
                   ^
[1m/proyecto/include/config/ConfigParser.hpp:31:14: [2mnote:[0m Technically the member function 'ConfigParser::validateErrorPagePath' can be static (but you may consider moving to unnamed namespace).
        bool validateErrorPagePath(const std::string& filePath) const;
             ^
[1m/proyecto/include/config/ConfigParser.hpp:35:18: [31m[35mperformance: inconclusive:[39m Technically the member function 'ConfigParser::findLocationBlock' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  const IConfig* findLocationBlock(const IConfig* serverNode, const std::string& path) const;
                 ^
[1m/proyecto/src/config/ConfigParser.cpp:380:30: [2mnote:[0m Technically the member function 'ConfigParser::findLocationBlock' can be static (but you may consider moving to unnamed namespace).
const IConfig* ConfigParser::findLocationBlock(const IConfig* serverNode, const std::string& path) const
                             ^
[1m/proyecto/include/config/ConfigParser.hpp:35:18: [2mnote:[0m Technically the member function 'ConfigParser::findLocationBlock' can be static (but you may consider moving to unnamed namespace).
  const IConfig* findLocationBlock(const IConfig* serverNode, const std::string& path) const;
                 ^
[1m/proyecto/include/config/ConfigParser.hpp:36:10: [31m[35mperformance: inconclusive:[39m Technically the member function 'ConfigParser::validateServerTokens' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  bool   validateServerTokens(const std::vector<std::string>& serverTokens) const;
         ^
[1m/proyecto/src/config/ConfigParser.cpp:407:20: [2mnote:[0m Technically the member function 'ConfigParser::validateServerTokens' can be static (but you may consider moving to unnamed namespace).
bool ConfigParser::validateServerTokens(const std::vector<std::string>& serverTokens) const {
                   ^
[1m/proyecto/include/config/ConfigParser.hpp:36:10: [2mnote:[0m Technically the member function 'ConfigParser::validateServerTokens' can be static (but you may consider moving to unnamed namespace).
  bool   validateServerTokens(const std::vector<std::string>& serverTokens) const;
         ^
[1m/proyecto/src/config/ConfigParser.cpp:463:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("port") == 0 && token.length() > 4) {
            ^
[1m/proyecto/src/config/ConfigParser.cpp:469:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("server_name") == 0 && token.length() > 11) {
            ^
[1m/proyecto/src/config/ConfigParser.cpp:475:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("host") == 0 && token.length() > 4) {
            ^
[1m/proyecto/src/config/ConfigParser.cpp:481:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("root") == 0 && token.length() > 4) {
            ^
[1m/proyecto/src/config/ConfigParser.cpp:487:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("index") == 0 && token != "index.html" && token.length() > 5) {
            ^
[1m/proyecto/src/config/ConfigParser.cpp:493:13: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (token.find("body_size") == 0 && token.length() > 9) {
            ^
[1m/proyecto/include/config/validateRoot.hpp:11:9: [31mstyle:[39m Class 'validateRoot' has a constructor with 1 argument that is not explicit. [noExplicitConstructor][0m
        validateRoot(const std::string& configFilePath);
        ^
[1m/proyecto/src/core/Request.cpp:5:10: [31mwarning:[39m Member variable 'Request::_keepAlive' is not initialized in the constructor. [uninitMemberVar][0m
Request::Request(): _cfg(NULL), _serverIndex(-1)
         ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_path' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_queryString' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_keepAlive' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_physicalPath' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_originalUri' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/src/core/Request.cpp:13:19: [31m[35mwarning: inconclusive:[39m Member variable 'Request::_basePath' is not assigned a value in 'Request::operator='. [operatorEqVarError][0m
Request& Request::operator=(const Request& other)
                  ^
[1m/proyecto/include/core/Response.hpp:25:23: [31m[35mstyle: inconclusive:[39m Technically the member function 'Response::getStatus' can be const. [functionConst][0m
  int                 getStatus();
                      ^
[1m/proyecto/src/core/Response.cpp:59:15: [2mnote:[0m Technically the member function 'Response::getStatus' can be const.
int Response::getStatus()
              ^
[1m/proyecto/include/core/Response.hpp:25:23: [2mnote:[0m Technically the member function 'Response::getStatus' can be const.
  int                 getStatus();
                      ^
[1m/proyecto/include/core/Response.hpp:28:23: [31m[35mstyle: inconclusive:[39m Technically the member function 'Response::getBody' can be const. [functionConst][0m
  std::string         getBody();
                      ^
[1m/proyecto/src/core/Response.cpp:82:23: [2mnote:[0m Technically the member function 'Response::getBody' can be const.
std::string Response::getBody()
                      ^
[1m/proyecto/include/core/Response.hpp:28:23: [2mnote:[0m Technically the member function 'Response::getBody' can be const.
  std::string         getBody();
                      ^
[1m/proyecto/src/core/Response.cpp:73:45: [31mperformance:[39m Function parameter 'key' should be passed by const reference. [passedByValue][0m
std::string Response::getHeader(std::string key)
                                            ^
[1m/proyecto/src/handler/CGIHandler.cpp:59:8: [31mstyle:[39m The scope of the variable 'argv' can be reduced. [variableScope][0m
 char *argv[] = {(char *)interpreter.c_str(), (char *)map["name"].c_str(), NULL};
       ^
[1m/proyecto/src/handler/CGIHandler.cpp:130:8: [31mstyle:[39m The scope of the variable 'argv' can be reduced. [variableScope][0m
 char *argv[] = {(char *)interpreter.c_str(), (char *)map["name"].c_str(), NULL};
       ^
[1m/proyecto/src/handler/CGIHandler.cpp:50:64: [31mperformance:[39m Function parameter 'interpreter' should be passed by const reference. [passedByValue][0m
Response CGIHandler::handleGET(const Request &req, std::string interpreter)
                                                               ^
[1m/proyecto/src/handler/CGIHandler.cpp:121:65: [31mperformance:[39m Function parameter 'interpreter' should be passed by const reference. [passedByValue][0m
Response CGIHandler::handlePOST(const Request &req, std::string interpreter)
                                                                ^
[1m/proyecto/src/handler/CGIHandler.cpp:260:75: [31mperformance:[39m Function parameter 'reason' should be passed by const reference. [passedByValue][0m
Response CGIHandler::CGIerror(const Request &req, int status, std::string reason, std::string mime)
                                                                          ^
[1m/proyecto/src/handler/CGIHandler.cpp:260:95: [31mperformance:[39m Function parameter 'mime' should be passed by const reference. [passedByValue][0m
Response CGIHandler::CGIerror(const Request &req, int status, std::string reason, std::string mime)
                                                                                              ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:48: [31m[35mstyle: inconclusive:[39m Function 'checkScriptAccess' argument 1 names different: declaration 'directory' definition 'dir'. [funcArgNamesDifferent][0m
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                               ^
[1m/proyecto/include/handler/CGIHandler.hpp:42:40: [2mnote:[0m Function 'checkScriptAccess' argument 1 names different: declaration 'directory' definition 'dir'.
  int   checkScriptAccess(std::string &directory, std::string &name);
                                       ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:48: [2mnote:[0m Function 'checkScriptAccess' argument 1 names different: declaration 'directory' definition 'dir'.
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                               ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:66: [31m[35mstyle: inconclusive:[39m Function 'checkScriptAccess' argument 2 names different: declaration 'name' definition 'scriptName'. [funcArgNamesDifferent][0m
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                                                 ^
[1m/proyecto/include/handler/CGIHandler.hpp:42:64: [2mnote:[0m Function 'checkScriptAccess' argument 2 names different: declaration 'name' definition 'scriptName'.
  int   checkScriptAccess(std::string &directory, std::string &name);
                                                               ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:66: [2mnote:[0m Function 'checkScriptAccess' argument 2 names different: declaration 'name' definition 'scriptName'.
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                                                 ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:95:20: [31m[35mperformance: inconclusive:[39m Use const reference for 'path' to avoid unnecessary data copying. [redundantCopyLocalConst][0m
 const std::string path = req.getPath();
                   ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:83:69: [31mperformance:[39m Function parameter 'method' should be passed by const reference. [passedByValue][0m
void CGIHandler::checkCfgPermission(const Request &req, std::string method)
                                                                    ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:181:75: [31mperformance:[39m Function parameter 'method' should be passed by const reference. [passedByValue][0m
bool CGIHandler::getEnviroment(std::vector<std::string> &env, std::string method, std::string path, std::string queryString, const Request &req)
                                                                          ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:181:95: [31mperformance:[39m Function parameter 'path' should be passed by const reference. [passedByValue][0m
bool CGIHandler::getEnviroment(std::vector<std::string> &env, std::string method, std::string path, std::string queryString, const Request &req)
                                                                                              ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:181:113: [31mperformance:[39m Function parameter 'queryString' should be passed by const reference. [passedByValue][0m
bool CGIHandler::getEnviroment(std::vector<std::string> &env, std::string method, std::string path, std::string queryString, const Request &req)
                                                                                                                ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:48: [31mstyle:[39m Parameter 'dir' can be declared with const [constParameter][0m
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                               ^
[1m/proyecto/src/handler/CGIHandlerAux.cpp:163:66: [31mstyle:[39m Parameter 'scriptName' can be declared with const [constParameter][0m
int CGIHandler::checkScriptAccess(std::string &dir, std::string &scriptName)
                                                                 ^
[1m/proyecto/src/handler/StaticFileHandler.cpp:111:50: [31mperformance:[39m Function parameter 'fullPath' should be passed by const reference. [passedByValue][0m
Response StaticFileHandler::doDELETE(std::string fullPath, Payload& payload, const Request& req)
                                                 ^
[1m/proyecto/src/handler/StaticFileHandler.cpp:146:76: [31mperformance:[39m Function parameter 'method' should be passed by const reference. [passedByValue][0m
bool StaticFileHandler::checkCfgPermission(const Request &req, std::string method)
                                                                           ^
[1m/proyecto/src/handler/UploadHandler.cpp:115:40: [31mstyle:[39m Variable 'finalBoundaryDelimiter' is assigned a value that is never used. [unreadVariable][0m
    std::string finalBoundaryDelimiter = "--" + boundary + "--";
                                       ^
[1m/proyecto/include/router/Router.hpp:13:9: [31mstyle:[39m Class 'Router' has a constructor with 1 argument that is not explicit. [noExplicitConstructor][0m
        Router(const std::string& root);
        ^
[1m/proyecto/src/router/Router.cpp:14:17: [31m[35mwarning: inconclusive:[39m Member variable 'Router::_absRoot' is not assigned a value in 'Router::operator='. [operatorEqVarError][0m
Router& Router::operator=(const Router& other)
                ^
[1m/proyecto/include/router/Router.hpp:20:15: [31m[35mperformance: inconclusive:[39m Technically the member function 'Router::getUriWithoutQuery' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  std::string getUriWithoutQuery(std::string uriWithString) const;
              ^
[1m/proyecto/src/router/Router.cpp:125:21: [2mnote:[0m Technically the member function 'Router::getUriWithoutQuery' can be static (but you may consider moving to unnamed namespace).
std::string Router::getUriWithoutQuery(std::string uriWithString) const
                    ^
[1m/proyecto/include/router/Router.hpp:20:15: [2mnote:[0m Technically the member function 'Router::getUriWithoutQuery' can be static (but you may consider moving to unnamed namespace).
  std::string getUriWithoutQuery(std::string uriWithString) const;
              ^
[1m/proyecto/src/router/Router.cpp:5:35: [31m[35mstyle: inconclusive:[39m Function 'Router' argument 1 names different: declaration 'root' definition 'absRoot'. [funcArgNamesDifferent][0m
Router::Router(const std::string& absRoot) : _absRoot(absRoot)
                                  ^
[1m/proyecto/include/router/Router.hpp:13:35: [2mnote:[0m Function 'Router' argument 1 names different: declaration 'root' definition 'absRoot'.
        Router(const std::string& root);
                                  ^
[1m/proyecto/src/router/Router.cpp:5:35: [2mnote:[0m Function 'Router' argument 1 names different: declaration 'root' definition 'absRoot'.
Router::Router(const std::string& absRoot) : _absRoot(absRoot)
                                  ^
[1m/proyecto/src/router/Router.cpp:89:33: [31mperformance:[39m Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind][0m
        if (uri == it->first || uri.find(it->first) == 0)
                                ^
[1m/proyecto/src/server/ClientBuffer.cpp:12:29: [31m[35mwarning: inconclusive:[39m Member variable 'ClientBuffer::persistent_buffer' is not assigned a value in 'ClientBuffer::operator='. [operatorEqVarError][0m
ClientBuffer& ClientBuffer::operator=(const ClientBuffer& other)
                            ^
[1m/proyecto/src/server/ClientBuffer.cpp:12:29: [31m[35mwarning: inconclusive:[39m Member variable 'ClientBuffer::_req' is not assigned a value in 'ClientBuffer::operator='. [operatorEqVarError][0m
ClientBuffer& ClientBuffer::operator=(const ClientBuffer& other)
                            ^
[1m/proyecto/src/server/ClientBuffer.cpp:53:48: [31m[35mstyle: inconclusive:[39m Function 'setContentLenght' argument 1 names different: declaration 'contentLenght' definition 'newContentLenght'. [funcArgNamesDifferent][0m
int ClientBuffer::setContentLenght(std::string newContentLenght)
                                               ^
[1m/proyecto/include/server/ClientBuffer.hpp:34:36: [2mnote:[0m Function 'setContentLenght' argument 1 names different: declaration 'contentLenght' definition 'newContentLenght'.
  int setContentLenght(std::string contentLenght);
                                   ^
[1m/proyecto/src/server/ClientBuffer.cpp:53:48: [2mnote:[0m Function 'setContentLenght' argument 1 names different: declaration 'contentLenght' definition 'newContentLenght'.
int ClientBuffer::setContentLenght(std::string newContentLenght)
                                               ^
[1m/proyecto/src/server/ClientBuffer.cpp:74:40: [31mstyle:[39m Parameter 'req' can be declared with const [constParameter][0m
void ClientBuffer::setRequest(Request& req) {_req = req;}
                                       ^
[1m/proyecto/include/server/Server.hpp:41:9: [31m[35mperformance: inconclusive:[39m Technically the member function 'Server::close_fd' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  void  close_fd(const int socket, int epollfd, std::vector<int> &container, std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers);
        ^
[1m/proyecto/src/server/Server.cpp:151:14: [2mnote:[0m Technically the member function 'Server::close_fd' can be static (but you may consider moving to unnamed namespace).
void Server::close_fd(const int fd, int epollfd, std::vector<int> &clientFdList,  std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers)
             ^
[1m/proyecto/include/server/Server.hpp:41:9: [2mnote:[0m Technically the member function 'Server::close_fd' can be static (but you may consider moving to unnamed namespace).
  void  close_fd(const int socket, int epollfd, std::vector<int> &container, std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers);
        ^
[1m/proyecto/include/server/Server.hpp:58:9: [31m[35mperformance: inconclusive:[39m Technically the member function 'Server::handleClientResponse' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  int   handleClientResponse(const int client_fd, std::map<int, Response> &pending_writes);
        ^
[1m/proyecto/src/server/Server.cpp:274:13: [2mnote:[0m Technically the member function 'Server::handleClientResponse' can be static (but you may consider moving to unnamed namespace).
int Server::handleClientResponse(const int client_fd,  std::map<int, Response> &pending_writes)
            ^
[1m/proyecto/include/server/Server.hpp:58:9: [2mnote:[0m Technically the member function 'Server::handleClientResponse' can be static (but you may consider moving to unnamed namespace).
  int   handleClientResponse(const int client_fd, std::map<int, Response> &pending_writes);
        ^
[1m/proyecto/src/server/Server.cpp:122:81: [31m[35mstyle: inconclusive:[39m Function 'accept_connection' argument 3 names different: declaration 'client_fds' definition 'clientFdList'. [funcArgNamesDifferent][0m
int Server::accept_connection(int listen_socket, int epollfd, std::vector<int> &clientFdList, std::map<int, ClientBuffer> &client_buffers)
                                                                                ^
[1m/proyecto/include/server/Server.hpp:39:83: [2mnote:[0m Function 'accept_connection' argument 3 names different: declaration 'client_fds' definition 'clientFdList'.
        int   accept_connection(int listen_socket, int epollfd, std::vector<int> &client_fds, std::map<int, ClientBuffer> &client_buffers);
                                                                                  ^
[1m/proyecto/src/server/Server.cpp:122:81: [2mnote:[0m Function 'accept_connection' argument 3 names different: declaration 'client_fds' definition 'clientFdList'.
int Server::accept_connection(int listen_socket, int epollfd, std::vector<int> &clientFdList, std::map<int, ClientBuffer> &client_buffers)
                                                                                ^
[1m/proyecto/src/server/Server.cpp:151:33: [31m[35mstyle: inconclusive:[39m Function 'close_fd' argument 1 names different: declaration 'socket' definition 'fd'. [funcArgNamesDifferent][0m
void Server::close_fd(const int fd, int epollfd, std::vector<int> &clientFdList,  std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers)
                                ^
[1m/proyecto/include/server/Server.hpp:41:28: [2mnote:[0m Function 'close_fd' argument 1 names different: declaration 'socket' definition 'fd'.
  void  close_fd(const int socket, int epollfd, std::vector<int> &container, std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers);
                           ^
[1m/proyecto/src/server/Server.cpp:151:33: [2mnote:[0m Function 'close_fd' argument 1 names different: declaration 'socket' definition 'fd'.
void Server::close_fd(const int fd, int epollfd, std::vector<int> &clientFdList,  std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers)
                                ^
[1m/proyecto/src/server/Server.cpp:151:68: [31m[35mstyle: inconclusive:[39m Function 'close_fd' argument 3 names different: declaration 'container' definition 'clientFdList'. [funcArgNamesDifferent][0m
void Server::close_fd(const int fd, int epollfd, std::vector<int> &clientFdList,  std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers)
                                                                   ^
[1m/proyecto/include/server/Server.hpp:41:67: [2mnote:[0m Function 'close_fd' argument 3 names different: declaration 'container' definition 'clientFdList'.
  void  close_fd(const int socket, int epollfd, std::vector<int> &container, std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers);
                                                                  ^
[1m/proyecto/src/server/Server.cpp:151:68: [2mnote:[0m Function 'close_fd' argument 3 names different: declaration 'container' definition 'clientFdList'.
void Server::close_fd(const int fd, int epollfd, std::vector<int> &clientFdList,  std::map<int, Response> &pending_writes, std::map<int, ClientBuffer> &client_buffers)
                                                                   ^
[1m/proyecto/src/server/Server.cpp:164:55: [31m[35mstyle: inconclusive:[39m Function 'freeEpoll' argument 2 names different: declaration 'client_fds' definition 'clientFdList'. [funcArgNamesDifferent][0m
void Server::freeEpoll(int epollfd, std::vector<int> &clientFdList)
                                                      ^
[1m/proyecto/include/server/Server.hpp:42:56: [2mnote:[0m Function 'freeEpoll' argument 2 names different: declaration 'client_fds' definition 'clientFdList'.
        void  freeEpoll(int epollfd, std::vector<int> &client_fds);
                                                       ^
[1m/proyecto/src/server/Server.cpp:164:55: [2mnote:[0m Function 'freeEpoll' argument 2 names different: declaration 'client_fds' definition 'clientFdList'.
void Server::freeEpoll(int epollfd, std::vector<int> &clientFdList)
                                                      ^
[1m/proyecto/src/server/Server.cpp:11:47: [31mperformance:[39m Function parameter 'cgiPath' should be passed by const reference. [passedByValue][0m
Server::Server(ConfigParser& cfg, std::string cgiPath, const std::string& rootPath, std::string uploadPath, IResponseBuilder *builder):
                                              ^
[1m/proyecto/src/server/Server.cpp:11:97: [31mperformance:[39m Function parameter 'uploadPath' should be passed by const reference. [passedByValue][0m
Server::Server(ConfigParser& cfg, std::string cgiPath, const std::string& rootPath, std::string uploadPath, IResponseBuilder *builder):
                                                                                                ^
[1m/proyecto/src/server/Server.cpp:211:42: [31mperformance:[39m Function parameter 'description' should be passed by const reference. [passedByValue][0m
Response Server::serverError(std::string description, ClientBuffer &additive_bff)
                                         ^
[1m/proyecto/src/server/Server.cpp:232:62: [31mperformance:[39m Function parameter 'reason' should be passed by const reference. [passedByValue][0m
Payload Server::createServerError(size_t status, std::string reason, std::string description, Request& req)
                                                             ^
[1m/proyecto/src/server/Server.cpp:232:82: [31mperformance:[39m Function parameter 'description' should be passed by const reference. [passedByValue][0m
Payload Server::createServerError(size_t status, std::string reason, std::string description, Request& req)
                                                                                 ^
[1m/proyecto/src/server/Server.cpp:232:104: [31mstyle:[39m Parameter 'req' can be declared with const [constParameter][0m
Payload Server::createServerError(size_t status, std::string reason, std::string description, Request& req)
                                                                                                       ^
[1m/proyecto/include/server/Server.hpp:47:9: [31m[35mperformance: inconclusive:[39m Technically the member function 'Server::checkIsChunked' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  bool  checkIsChunked(ClientBuffer &additive_bff, const Request &req);
        ^
[1m/proyecto/src/server/ServerReadRequest.cpp:64:14: [2mnote:[0m Technically the member function 'Server::checkIsChunked' can be static (but you may consider moving to unnamed namespace).
bool Server::checkIsChunked(ClientBuffer &additive_bff, const Request &req)
             ^
[1m/proyecto/include/server/Server.hpp:47:9: [2mnote:[0m Technically the member function 'Server::checkIsChunked' can be static (but you may consider moving to unnamed namespace).
  bool  checkIsChunked(ClientBuffer &additive_bff, const Request &req);
        ^
[1m/proyecto/include/server/Server.hpp:51:9: [31m[35mperformance: inconclusive:[39m Technically the member function 'Server::validateChunkedBody' can be static (but you may consider moving to unnamed namespace). [functionStatic][0m
  void  validateChunkedBody(ClientBuffer &additive_bff);
        ^
[1m/proyecto/src/server/ServerReadRequest.cpp:113:14: [2mnote:[0m Technically the member function 'Server::validateChunkedBody' can be static (but you may consider moving to unnamed namespace).
void Server::validateChunkedBody(ClientBuffer &additive_bff)
             ^
[1m/proyecto/include/server/Server.hpp:51:9: [2mnote:[0m Technically the member function 'Server::validateChunkedBody' can be static (but you may consider moving to unnamed namespace).
  void  validateChunkedBody(ClientBuffer &additive_bff);
        ^
[1m/proyecto/src/server/ServerReadRequest.cpp:119:9: [31mstyle:[39m The scope of the variable 'end_pos' can be reduced. [variableScope][0m
 size_t end_pos;
        ^
[1m/proyecto/src/server/ServerReadRequest.cpp:117:20: [31m[35mperformance: inconclusive:[39m Use const reference for 'buffer' to avoid unnecessary data copying. [redundantCopyLocalConst][0m
 const std::string buffer = additive_bff.get_buffer();
                   ^
[1m/proyecto/src/server/ServerReadRequest.cpp:155:20: [31m[35mperformance: inconclusive:[39m Use const reference for 'path' to avoid unnecessary data copying. [redundantCopyLocalConst][0m
 const std::string path = req.getPath();
                   ^
[1mnofile:0:0: [31minformation:[39m Cppcheck cannot find all the include files (use --check-config for details) [missingInclude][0m

